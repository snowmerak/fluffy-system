// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package versions

import (
	"context"
	"database/sql"
)

const getAllSemantics = `-- name: GetAllSemantics :many
SELECT id, project, major, minor, patch, commit_hash, created_at, description FROM semantic_version
`

func (q *Queries) GetAllSemantics(ctx context.Context) ([]SemanticVersion, error) {
	rows, err := q.db.QueryContext(ctx, getAllSemantics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SemanticVersion
	for rows.Next() {
		var i SemanticVersion
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Major,
			&i.Minor,
			&i.Patch,
			&i.CommitHash,
			&i.CreatedAt,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSemanticByCommit = `-- name: GetSemanticByCommit :one
SELECT id, project, major, minor, patch, commit_hash, created_at, description FROM semantic_version WHERE project = ? AND commit_hash = ?
`

type GetSemanticByCommitParams struct {
	Project    string
	CommitHash string
}

func (q *Queries) GetSemanticByCommit(ctx context.Context, arg GetSemanticByCommitParams) (SemanticVersion, error) {
	row := q.db.QueryRowContext(ctx, getSemanticByCommit, arg.Project, arg.CommitHash)
	var i SemanticVersion
	err := row.Scan(
		&i.ID,
		&i.Project,
		&i.Major,
		&i.Minor,
		&i.Patch,
		&i.CommitHash,
		&i.CreatedAt,
		&i.Description,
	)
	return i, err
}

const getSemanticByVersion = `-- name: GetSemanticByVersion :many
SELECT id, project, major, minor, patch, commit_hash, created_at, description FROM semantic_version WHERE project = ? AND major = ? AND minor = ? AND patch = ?
`

type GetSemanticByVersionParams struct {
	Project string
	Major   int32
	Minor   int32
	Patch   int32
}

func (q *Queries) GetSemanticByVersion(ctx context.Context, arg GetSemanticByVersionParams) ([]SemanticVersion, error) {
	rows, err := q.db.QueryContext(ctx, getSemanticByVersion,
		arg.Project,
		arg.Major,
		arg.Minor,
		arg.Patch,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SemanticVersion
	for rows.Next() {
		var i SemanticVersion
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Major,
			&i.Minor,
			&i.Patch,
			&i.CommitHash,
			&i.CreatedAt,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSemantics = `-- name: GetSemantics :many
SELECT id, project, major, minor, patch, commit_hash, created_at, description FROM semantic_version WHERE project = ? AND created_at < ? ORDER BY created_at DESC LIMIT ?
`

type GetSemanticsParams struct {
	Project   string
	CreatedAt sql.NullTime
	Limit     int32
}

func (q *Queries) GetSemantics(ctx context.Context, arg GetSemanticsParams) ([]SemanticVersion, error) {
	rows, err := q.db.QueryContext(ctx, getSemantics, arg.Project, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SemanticVersion
	for rows.Next() {
		var i SemanticVersion
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Major,
			&i.Minor,
			&i.Patch,
			&i.CommitHash,
			&i.CreatedAt,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSemantic = `-- name: InsertSemantic :execresult
INSERT INTO semantic_version (project, major, minor, patch, commit_hash, description) VALUES (?, ?, ?, ?, ?, ?)
`

type InsertSemanticParams struct {
	Project     string
	Major       int32
	Minor       int32
	Patch       int32
	CommitHash  string
	Description sql.NullString
}

func (q *Queries) InsertSemantic(ctx context.Context, arg InsertSemanticParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertSemantic,
		arg.Project,
		arg.Major,
		arg.Minor,
		arg.Patch,
		arg.CommitHash,
		arg.Description,
	)
}

const updateSemantic = `-- name: UpdateSemantic :execresult
UPDATE semantic_version SET description = ? WHERE project = ? AND major = ? AND minor = ? AND patch = ?
`

type UpdateSemanticParams struct {
	Description sql.NullString
	Project     string
	Major       int32
	Minor       int32
	Patch       int32
}

func (q *Queries) UpdateSemantic(ctx context.Context, arg UpdateSemanticParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateSemantic,
		arg.Description,
		arg.Project,
		arg.Major,
		arg.Minor,
		arg.Patch,
	)
}
